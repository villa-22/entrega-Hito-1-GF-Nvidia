title: "Proyecto Gestión Financiera"
author: "Matías Villaseca Torres"
format: html
editor: visual
bibliography: references.bib
lang: es-CL
---

```{r configuraciones}
#| message: false
#| echo: false
library(tidyverse)
library(tidyquant)
#Hito 1:
##Descripción Activo y Contexto
###Definición
El sector tecnológico se caracteriza por la innovación continua en áreas como la inteligencia artificial y los semiconductores, que han transformado diversas industrias (Brynjolfsson & McAfee, 2014),
el libro "The Second Machine Age: El libro "Work, Progress, and Prosperity in a Time of Brilliant Technologies" de Brynjolfsson y McAfee (2014) lo elegí en lugar de un artículo científico debido a su 
importancia para analizar el impacto que las tecnologías disruptivas como la inteligencia artificial y los avances en hardware han tenido en la economía y la sociedad Este libro presenta un enfoque completo 
y fácil de entender sobre los efectos de las tecnologías emergentes, que incluye tanto aspectos teóricos como prácticos. Ofrece una perspectiva integral difícil de encontrar en un artículo académico individual. 
El libro ha sido citado y utilizado extensamente como una referencia clave en el estudio del impacto tecnológico en varias industrias, por lo que se convierte en un recurso esencial para analizar el papel de Nvidia 
en el avance tecnológico.
Empresas como Nvidia, que lideran el desarrollo de unidades de procesamiento gráfico (GPUs), juegan un papel crucial en impulsar la investigación y el desarrollo de hardware de alto rendimiento para la 
inteligencia artificial y el procesamiento de datos masivos (Jouppi et al., 2017). Según Muro y Liu (2020), la inteligencia artificial está teniendo un impacto significativo en la economía global, creando 
nuevas oportunidades en sectores como la manufactura y los servicios.

###Motivación
Elegí Nvidia como activo de estudio debido a su relevancia en la transformación digital global y su posicionamiento como uno de los actores clave en sectores emergentes como la inteligencia artificial,
el gaming y el desarrollo de supercomputadoras. En los últimos años, Nvidia ha visto un crecimiento significativo en sus ingresos, impulsado por la creciente demanda de sus productos en sectores como los 
centros de datos y la inteligencia artificial. Además, la alta volatilidad de sus acciones proporciona un interesante caso de estudio para el análisis de opciones financieras.

###Contexto
En los últimos cinco años, el precio de las acciones de Nvidia ha mostrado una volatilidad considerable, con un crecimiento significativo entre 2020 y 2022, impulsado por el auge de la inteligencia artificial
y el gaming. Sin embargo, ha experimentado grandes fluctuaciones debido a la incertidumbre del mercado y a la especulación en torno a las tecnologías emergentes.
En el siguiente gráfico, se puede observar la evolución del precio de cierre de Nvidia utilizando los datos históricos de la empresa.("https://github.com/villa-22/entrega-Hito-1-GF-Nvidia/blob/main/Captura%20de%20pantalla%20(123).png")
tambien podemos observar la evolución de los Rendimientos Diarios de Nvidia en el siguente grafico ("https://github.com/villa-22/entrega-Hito-1-GF-Nvidia/blob/main/Captura%20de%20pantalla%20(124).png")
y la evolución del Volumen de Transacciones de Nvidia en el siguente grafico ("https://github.com/villa-22/entrega-Hito-1-GF-Nvidia/blob/main/Captura%20de%20pantalla%20(125).png)

###Cálculo simbólico con SymPy
Vamos a calcular el precio de la opción de compra europea utilizando la librería SymPy y los datos históricos de Nvidia. Posteriormente, este precio de la opción será utilizado en los modelos binomial y
Black-Scholes.

Código completo con SymPy:
# Importamos las librerías necesarias
import pandas as pd
from sympy import *
import numpy as np

# Inicializar la librería simbólica para la derivación algebraica
init_printing()

# Cargar los datos históricos de Nvidia desde el archivo CSV
nvidia_data = pd.read_csv('/mnt/data/NVDA Historical Data (2).csv')

# Preprocesar los datos: convertir el precio en valores numéricos y ordenar por fecha
nvidia_data['Price'] = pd.to_numeric(nvidia_data['Price'], errors='coerce')
nvidia_data['Date'] = pd.to_datetime(nvidia_data['Date'], format='%m/%d/%Y')
nvidia_data = nvidia_data.sort_values(by='Date').reset_index(drop=True)

# Obtener el precio inicial (S0) y calcular los retornos u y d
S0 = nvidia_data['Price'].iloc[0]  # Precio inicial de la acción
S_final = nvidia_data['Price'].iloc[-1]  # Precio final
u = S_final / S0  # Factor de retorno positivo (estado bueno)
d = 0.5  # Asumimos un factor de retorno negativo para simplificar el análisis

# Parámetros del bono (r) y el valor del bono (B)
r, B = 1.01, 100  # Tasa libre de riesgo y valor del bono

# Definir el precio de ejercicio de la opción
K = 50  # Precio de ejercicio de la opción

# Definir la matriz W que contiene los precios iniciales y los retornos
W = Matrix([[-B, -S0, -Symbol('q3')], 
            [r*B, u*S0, max(0, u*S0 - K)], 
            [r*B, d*S0, max(0, d*S0 - K)]])
W

# Definir los símbolos para las probabilidades pi_u y pi_d
pi_u, pi_d = symbols('pi_u pi_d')

# Definir el vector [1, pi'] donde pi es el vector de probabilidades ajustadas
pi = Matrix([[1], [pi_u], [pi_d]])
pi

# Aplicamos la condición de no arbitraje [1, pi'] * W = 0
NA = pi.transpose() * W
NA

# Usamos SymPy para resolver el sistema de ecuaciones y encontrar pi_u y pi_d
piNA = solve([NA[0], NA[1]], [pi_u, pi_d], dict=True)
piNA

# Definir la expresión de precios incluyendo la opción utilizando la matriz W y las probabilidades ajustadas
Prices = Matrix([[1], [piNA[0][pi_u]], [piNA[0][pi_d]]]).transpose() * W

# Reemplazamos los valores para d=0.5, u con el valor de retorno calculado y r=1.01
precio_opcion = Prices.subs([(d, 0.5), (u, S_final / S0), (r, 1.01)])
precio_opcion
Explicación:
Este código utiliza los datos históricos de Nvidia para derivar simbólicamente el precio de la opción de compra europea. Usamos el Teorema Fundamental de Valoración de Activos para encontrar las probabilidades
ajustadas de los posibles estados del mercado. El precio resultante de la opción se usará en los siguientes cálculos.

###Modelo Binomial
El Modelo Binomial de Valoración de Opciones, también conocido como el modelo de Cox-Ross-Rubinstein (1979), estima el valor de una opción mediante la construcción de un árbol binomial que modela posibles
movimientos del precio del activo subyacente en el tiempo.

Aplicación del precio de la opción calculado
Usamos el precio de la opción calculado con SymPy como referencia para realizar los cálculos con el modelo binomial.

{r}
binomial_model <- function(cu, p, cd, rf) {
  return((cu * p + cd * (1 - p)) / (1 + rf))
} 

S <- tail(nvidia_data$Price, 1)  # Precio actual del activo subyacente
K <- 38  # Precio de ejercicio de la opción
T <- 1  # Tiempo hasta la expiración (en años)
r <- 0.0642 # Tasa de interés libre de riesgo
u <- 1.1  # Factor de crecimiento en un paso hacia arriba
d <- 0.9  # Factor de crecimiento en un paso hacia abajo

Su <- S * u
Sd <- S * d
p <- (1 + r - d) / (u - d)

cu <- max(Su - K, 0)
cd <- max(Sd - K, 0)

precio_binomial <- binomial_model(cu, p, cd, r)
print(paste("El precio de la opción con el Modelo Binomial es ", round(precio_binomial, 2), "USD"))

###Modelo Black-Scholes
El Modelo Black-Scholes, propuesto por Fischer Black y Myron Scholes en 1973, es un modelo matemático que se utiliza para la valoración de opciones europeas. Este modelo asume que los precios de los activos 
siguen un movimiento browniano y permite calcular el valor de una opción con base en la volatilidad del activo subyacente.

{r}
black_scholes <- function(S, K, t, r, sigma) {
    d1 <- (log(S / K) + (r + 0.5 * sigma^2) * t) / (sigma * sqrt(t))
    d2 <- d1 - sigma * sqrt(t)
    N_d1 <- pnorm(d1)
    N_d2 <- pnorm(d2)
    precio_call <- S * N_d1 - K * exp(-r * t) * N_d2
    return(precio_call)
}

sigma <- sd(nvidia_data$Log_Returns, na.rm = TRUE)

precio_black_scholes <- black_scholes(S, K, T, r, sigma)
print(paste("El precio de la opción con el Modelo Black-Scholes es ", round(precio_black_scholes, 2), "USD"))

Comparación de Modelos
En el análisis realizado sobre las acciones de Nvidia, ambos modelos financieros, Black-Scholes y el Modelo Binomial, arrojaron un valor igual para la opción call: 67.15 USD. A pesar de que los resultados son
iguales en este caso, es importante entender las diferencias fundamentales entre ambos modelos y en qué contextos uno podría ser más adecuado que el otro.

1. Modelo Binomial
El Modelo Binomial de Valoración de Opciones, propuesto por Cox, Ross y Rubinstein (1979), es un enfoque discreto para la valoración de opciones. Este modelo asume que el precio de la acción puede moverse 
hacia arriba o hacia abajo en cada paso del tiempo, formando un árbol de posibilidades. En el análisis, se calculó que el precio de la opción call con este modelo fue de 67.15 USD.
2. Modelo Black-Scholes
El Modelo Black-Scholes, desarrollado por Fischer Black y Myron Scholes en 1973, es un modelo matemático que asume que el precio de la acción subyacente sigue un movimiento browniano y que la volatilidad es
constante a lo largo del tiempo. En este caso, el valor calculado para la opción call fue también de 67.15 USD, igual que en el modelo binomial.
En resumen, ambos modelos proporcionan resultados válidos y útiles en el análisis de las opciones de Nvidia. Sin embargo, la elección de cuál usar depende del tipo de opción que se está valorando y de los
supuestos que mejor se adapten a las características del activo subyacente y del mercado en el que opera.

Bibliografía
Black, F., & Scholes, M. (1973). The pricing of options and corporate liabilities. Journal of Political Economy, 81(3), 637-654.
Cox, J. C., Ross, S. A., & Rubinstein, M. (1979). Option pricing: A simplified approach. Journal of Financial Economics, 7(3), 229-263.
Ahmad, K. (2018). An analysis of the binomial model for option pricing. Journal of Financial Studies.
