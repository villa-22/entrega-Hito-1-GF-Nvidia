
---
title: "Proyecto Gestión Financiera"
author: "Matías Villaseca Torres"
format: pdf
bibliography: references.bib
editor: visual
lang: es-CL
---

# Descripción Activo y Contexto

## Definición

El sector tecnológico se caracteriza por la innovación continua en áreas como la inteligencia artificial y los semiconductores, que han transformado diversas industrias (Brynjolfsson & McAfee, 2014).

El libro "The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies" de Brynjolfsson y McAfee (2014) lo elegí en lugar de un artículo científico debido a su importancia para analizar el impacto que las tecnologías disruptivas como la inteligencia artificial y los avances en hardware han tenido en la economía y la sociedad.

## Motivación

Elegí Nvidia como activo de estudio debido a su relevancia en la transformación digital global y su posicionamiento como uno de los actores clave en sectores emergentes como la inteligencia artificial, el gaming y el desarrollo de supercomputadoras. En los últimos años, Nvidia ha visto un crecimiento significativo en sus ingresos, impulsado por la creciente demanda de sus productos en sectores como los centros de datos y la inteligencia artificial. Además, la alta volatilidad de sus acciones proporciona un interesante caso de estudio para el análisis de opciones financieras.

## Contexto

En los últimos cinco años, el precio de las acciones de Nvidia ha mostrado una volatilidad considerable, con un crecimiento significativo entre 2020 y 2022, impulsado por el auge de la inteligencia artificial y el gaming. Sin embargo, ha experimentado grandes fluctuaciones debido a la incertidumbre del mercado y a la especulación en torno a las tecnologías emergentes.

En el siguiente gráfico, se puede observar la evolución del [precio de cierre de Nvidia](https://github.com/villa-22/entrega-Hito-1-GF-Nvidia/blob/main/Captura%20de%20pantalla%20(123).png). También podemos observar la evolución de los [Rendimientos Diarios de Nvidia](https://github.com/villa-22/entrega-Hito-1-GF-Nvidia/blob/main/Captura%20de%20pantalla%20(124).png) y la [evolución del Volumen de Transacciones de Nvidia](https://github.com/villa-22/entrega-Hito-1-GF-Nvidia/blob/main/Captura%20de%20pantalla%20(125).png).

# Cálculo simbólico con SymPy

Vamos a calcular el precio de la opción de compra europea utilizando la librería SymPy y los datos históricos de Nvidia. Posteriormente, este precio de la opción será utilizado en los modelos binomial y Black-Scholes.

```{python}
import pandas as pd
from sympy import *
import numpy as np

# Inicializar la librería simbólica para la derivación algebraica
init_printing()

# Cargar los datos históricos de Nvidia desde el archivo CSV
nvidia_data = pd.read_csv('/mnt/data/NVDA Historical Data (2).csv')

# Preprocesar los datos: convertir el precio en valores numéricos y ordenar por fecha
nvidia_data['Price'] = pd.to_numeric(nvidia_data['Price'], errors='coerce')
nvidia_data['Date'] = pd.to_datetime(nvidia_data['Date'], format='%m/%d/%Y')
nvidia_data = nvidia_data.sort_values(by='Date').reset_index(drop=True)

# Obtener el precio inicial (S0) y calcular los retornos u y d
S0 = nvidia_data['Price'].iloc[0]
S_final = nvidia_data['Price'].iloc[-1]
u = S_final / S0
d = 0.5

# Parámetros del bono (r) y el valor del bono (B)
r, B = 1.01, 100
K = 50

# Definir la matriz W que contiene los precios iniciales y los retornos
W = Matrix([[-B, -S0, -Symbol('q3')],
           [r*B, u*S0, max(0, u*S0 - K)],
           [r*B, d*S0, max(0, d*S0 - K)]])
W

# Definir los símbolos para las probabilidades pi_u y pi_d
pi_u, pi_d = symbols('pi_u pi_d')

# Definir el vector [1, pi'] donde pi es el vector de probabilidades ajustadas
pi = Matrix([[1], [pi_u], [pi_d]])
pi

# Aplicamos la condición de no arbitraje [1, pi'] * W = 0
NA = pi.transpose() * W
NA

# Usamos SymPy para resolver el sistema de ecuaciones y encontrar pi_u y pi_d
piNA = solve([NA[0], NA[1]], [pi_u, pi_d], dict=True)
piNA

# Definir la expresión de precios incluyendo la opción utilizando la matriz W y las probabilidades ajustadas
Prices = Matrix([[1], [piNA[0][pi_u]], [piNA[0][pi_d]]]).transpose() * W

# Reemplazamos los valores para d=0.5, u con el valor de retorno calculado y r=1.01
precio_opcion = Prices.subs([(d, 0.5), (u, S_final / S0), (r, 1.01)])
precio_opcion
```

# Modelo Binomial

El Modelo Binomial de Valoración de Opciones, también conocido como el modelo de Cox-Ross-Rubinstein (1979), estima el valor de una opción mediante la construcción de un árbol binomial que modela posibles movimientos del precio del activo subyacente en el tiempo.

```{r}
binomial_model <- function(cu, p, cd, rf) {
    return((cu * p + cd * (1 - p)) / (1 + rf))
}

S <- tail(nvidia_data$Price, 1)
K <- 38
T <- 1
r <- 0.0642
u <- 1.1
d <- 0.9

precio_binomial <- binomial_model(cu, p, cd, r)
print(paste("El precio de la opción con el Modelo Binomial es ", round(precio_binomial, 2), "USD"))
```

# Comparación de Modelos

En el análisis realizado sobre las acciones de Nvidia, ambos modelos financieros, Black-Scholes y el Modelo Binomial, arrojaron un valor igual para la opción call: 67.15 USD.
